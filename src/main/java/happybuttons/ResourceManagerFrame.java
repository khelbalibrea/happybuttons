/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package happybuttons;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.channels.FileChannel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Michael Balibrea
 */
public class ResourceManagerFrame extends javax.swing.JDialog {
    DefaultTableModel tblModelBS, tblModelVL;
    DefaultListModel listModelVL = new DefaultListModel();
    String theme = HappyButtons.uiTheme;
    /**
     * Creates new form ResourceManagerFrame
     */
    public ResourceManagerFrame(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        super.setTitle("Resources");
        initComponents();
        
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/3-this.getSize().height/2);
        
        // set frame icon
        ImageIcon imgIcon = new ImageIcon(HappyButtons.documentsPathDoubleSlash + Utility.strDoubleSlash("\\HappyButtons\\res\\icon\\wave.png"));
        setIconImage(imgIcon.getImage());
        
        tblResources.setAutoCreateRowSorter(true);
        
        setupTheme();
        populateBSTable();
        populateVLTable();
        loadJListVL(HappyButtons.profileDB, MainFrame.loadedIndexProfile);
    }
    
    public void populateBSTable() {
        File bfolder = new File(HappyButtons.documentsPath + "/HappyButtons/bg/");
        File sfolder = new File(HappyButtons.documentsPath + "/HappyButtons/sfx/");
        
        File[] bFileList = bfolder.listFiles();
        File[] sFileList = sfolder.listFiles();
        
        tblModelBS = (DefaultTableModel) tblResources.getModel();
        
        for(File f : bFileList) {
            String bgmList = "";
            bgmList = (HappyButtons.dbo).checkBgmInProfiles(HappyButtons.profileDB, Utility.renameListName(f.getName()));
            
            tblModelBS.insertRow(tblModelBS.getRowCount(), new Object[]{
                Utility.renameListName(f.getName()), "BGM", bgmList
            });
        }
        
        for(File f : sFileList) {
            String sfxList = "";
            sfxList = (HappyButtons.dbo).checkSfxInProfiles(HappyButtons.profileDB, Utility.renameListName(f.getName()));
            
            tblModelBS.insertRow(tblModelBS.getRowCount(), new Object[]{
                Utility.renameListName(f.getName()), "SFX", sfxList
            });
        }
    }
    
    public void populateVLTable() {
        File vlFolder = new File(HappyButtons.documentsPath + "/HappyButtons/hlvids/");
        File[] vlFileList = vlFolder.listFiles();
        
        tblModelVL = (DefaultTableModel) tblVideoLoop.getModel();
        
        for(File f : vlFileList) {
            String videoLoopList = "";
            videoLoopList = (HappyButtons.dbo).checkVideoLoopInProfiles(HappyButtons.profileDB, Utility.renameVideoName(f.getName()));
            
            tblModelVL.insertRow(tblModelVL.getRowCount(), new Object[]{
                Utility.renameVideoName(f.getName()), videoLoopList
            });
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabPanel = new javax.swing.JTabbedPane();
        panelBgmSfx = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblResources = new javax.swing.JTable();
        btnDeleteBS = new javax.swing.JButton();
        panelHappyLoop = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblVideoLoop = new javax.swing.JTable();
        btnDeleteVL = new javax.swing.JButton();
        btnAddVL = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane3 = new javax.swing.JScrollPane();
        listVL = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        btnAddToList = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(700, 290));
        setMinimumSize(new java.awt.Dimension(700, 290));
        setResizable(false);

        panelBgmSfx.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblResources.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sound item", "Type", "Used in (Profile)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblResources);

        panelBgmSfx.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 650, 340));

        btnDeleteBS.setText("Delete");
        btnDeleteBS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteBSActionPerformed(evt);
            }
        });
        panelBgmSfx.add(btnDeleteBS, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 10, 140, -1));

        tabPanel.addTab("BGM / SFX", panelBgmSfx);

        panelHappyLoop.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblVideoLoop.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Video item", "Used in (Profile)"
            }
        ));
        tblVideoLoop.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jScrollPane2.setViewportView(tblVideoLoop);
        if (tblVideoLoop.getColumnModel().getColumnCount() > 0) {
            tblVideoLoop.getColumnModel().getColumn(0).setResizable(false);
            tblVideoLoop.getColumnModel().getColumn(1).setResizable(false);
        }

        panelHappyLoop.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 540, 280));

        btnDeleteVL.setText("Delete");
        btnDeleteVL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteVLActionPerformed(evt);
            }
        });
        panelHappyLoop.add(btnDeleteVL, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 130, -1));

        btnAddVL.setText("Add");
        btnAddVL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddVLActionPerformed(evt);
            }
        });
        panelHappyLoop.add(btnAddVL, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, 130, -1));

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        panelHappyLoop.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 10, 10, 350));

        jScrollPane3.setViewportView(listVL);

        panelHappyLoop.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(567, 30, 230, 290));

        jLabel1.setText("My video list");
        panelHappyLoop.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 10, 140, -1));

        btnAddToList.setText("Add to my list");
        btnAddToList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToListActionPerformed(evt);
            }
        });
        panelHappyLoop.add(btnAddToList, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 300, 120, -1));

        btnRemove.setText("Remove from my list");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        panelHappyLoop.add(btnRemove, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 330, 150, -1));

        tabPanel.addTab("Video Loop", panelHappyLoop);

        getContentPane().add(tabPanel, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setupTheme() {
        if(theme.equals("light")) {
            this.getContentPane().setBackground(new JDialog().getBackground());
            
            btnDeleteBS.setBackground(new JButton().getBackground());
            btnDeleteBS.setForeground(new JButton().getForeground());
        }
        else if(theme.equals("dark")) {
            this.getContentPane().setBackground(Color.DARK_GRAY);
            
            btnDeleteBS.setBackground(Color.GRAY);
            btnDeleteBS.setForeground(Color.WHITE);
        }
    }
    
    public void loadJListVL(ProfileDatabase profileDB[], int index) {
        if(MainFrame.loadedIndexProfile > 0) {
            String[] arrVL = Utility.splitParts(profileDB[index].getStrVidLoop());
            String goneVLs = "";
            int vlLost = 0;
            int numbering = 1;

            for(String vid : arrVL) {
                File destCheck = new File(HappyButtons.documentsPath + "\\HappyButtons\\hlvids\\" + vid + ".mp4");
                if(!destCheck.exists()) {
                    int removedIndex = Utility.findArrIndex(arrVL, vid);
                    arrVL = Utility.removeElementInArr(arrVL, removedIndex);
                    vlLost++;
                    if(!goneVLs.equals("")) {
                        goneVLs = goneVLs + "(" + numbering + ") " + vid + ".mp4\n";
                        numbering++;
                    }
                    else {
                        goneVLs = "(" + numbering + ") " + vid + ".mp4\n";
                        numbering++;
                    }
                }
            }

            if(listModelVL != null) {
                (listModelVL).removeAllElements();
            }

            for(String vid : arrVL) {
                (listModelVL).addElement(vid);
            }

            listVL.setModel(listModelVL);
        }
    }
    
    private void btnDeleteBSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteBSActionPerformed
        int selectedRow = tblResources.getSelectedRow();// for checking only if atleast one item is selected
        int[] selectedRows = tblVideoLoop.getSelectedRows();
        File filePath = null;
        String[] fileErrorBGM = {};
        String[] fileErrorSFX = {};
        
        if(selectedRow != -1) {
            int confirmation = JOptionPane.showConfirmDialog(null, 
                    "Are you sure you want to permanently delete selected item(s)?", 
                    "Delete items", 
                    JOptionPane.YES_NO_OPTION, 
                    JOptionPane.WARNING_MESSAGE);
            
            if(confirmation == 0) {
                String selectedItem = "", selectedType = "";
                for(int i = (selectedRows.length - 1); i >= 0; i--) {
                    selectedItem = tblModelVL.getValueAt(selectedRows[i], 0).toString();
                    selectedType = tblModelVL.getValueAt(selectedRows[i], 1).toString();
                    
                    if(selectedType.equals("BGM")) {
                        filePath = new File(HappyButtons.documentsPathDoubleSlash + "\\HappyButtons\\bg\\" + selectedItem + ".wav");
                    }
                    else if(selectedType.equals("SFX")) {
                        filePath = new File(HappyButtons.documentsPathDoubleSlash + "\\HappyButtons\\sfx\\" + selectedItem + ".wav");
                    }

                    if(filePath.delete()) {
                        tblModelBS.removeRow(selectedRow);

                        if(selectedType.equals("BGM")) {
                            (MainFrame.blist).removeElement(selectedItem);

                            // gets the new list in bgm jlist
        //                    int listBGMSize = (MainFrame.listBGM).getModel().getSize();
        //                    MainFrame.strBGM = "";
        //
        //                    for(int ctr = 0; ctr < listBGMSize; ctr++){
        //                        if(ctr == 0) {
        //                            MainFrame.strBGM = (MainFrame.listBGM).getModel().getElementAt(ctr);
        //                        }
        //                        else if(ctr > 0 && ctr <= (listBGMSize - 1)) {
        //                            MainFrame.strBGM = MainFrame.strBGM + ":" + (MainFrame.listBGM).getModel().getElementAt(ctr);
        //                        }
        //                    }
        //                    
        //                    // save automatically after deletion
        //                    Profile profile = new Profile();
        //                    HappyButtons.profileDB[HappyButtons.loadedDB] = new ProfileDatabase();
        //                    (HappyButtons.dbo).saveEnvironment(HappyButtons.profileDB, profile);
                        }
                        else if(selectedType.equals("SFX")) {
                            (MainFrame.slist).removeElement(selectedItem);

                            // gets the new list in sfx jlist
        //                    int listSFXSize = (MainFrame.listSFX).getModel().getSize();
        //                    MainFrame.strSFX = "";
        //
        //                    for(int ctr = 0; ctr < listSFXSize; ctr++){
        //                        if(ctr == 0) {
        //                            MainFrame.strSFX = (MainFrame.listSFX).getModel().getElementAt(ctr);
        //                        }
        //                        else if(ctr > 0 && ctr <= (listSFXSize - 1)) {
        //                            MainFrame.strSFX = MainFrame.strSFX + ":" + (MainFrame.listSFX).getModel().getElementAt(ctr);
        //                        }
        //                    }
        //                    
        //                    // save automatically after deletion
        //                    Profile profile = new Profile();
        //                    HappyButtons.profileDB[HappyButtons.loadedDB] = new ProfileDatabase();
        //                    (HappyButtons.dbo).saveEnvironment(HappyButtons.profileDB, profile);
                        }

                        selectedItem = "";
                    }
                    else {
                        if(selectedType == "BGM") {
                            fileErrorBGM = Utility.addElementInStrArr(fileErrorBGM.length, fileErrorBGM, selectedItem);
                        }
                        else {
                            fileErrorSFX = Utility.addElementInStrArr(fileErrorSFX.length, fileErrorSFX, selectedItem);
                        }
                        
                        selectedItem = ""; selectedType = "";
                        
                        if(fileErrorBGM.length > 0 || fileErrorSFX.length > 0) {
                            String err = "", strBGMListDown = "", strSFXListDown = "";
                            err = (fileErrorBGM.length + fileErrorSFX.length) + " item(s)\n";
                            int errNumbering = 1;

                            if(fileErrorBGM.length > 0) {
                                for(int ii = 1; ii <= fileErrorBGM.length; ii++) {
                                    strBGMListDown = strBGMListDown + "\n(" + errNumbering + ") " + fileErrorBGM[i] + ".mp4 [BGM]";
                                    errNumbering++;
                                }
                            }
                            
                            if(fileErrorSFX.length > 0) {
                                for(int ii = 1; ii <= fileErrorSFX.length; ii++) {
                                    strSFXListDown = strSFXListDown + "\n(" + errNumbering + ") " + fileErrorSFX[i] + ".mp4 [SFX]";
                                    errNumbering++;
                                }
                            }

                            JOptionPane.showMessageDialog(HappyButtons.mf, 
                                "Error in deleting " + err + strBGMListDown + strSFXListDown, 
                                "File deletion error", 
                                JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnDeleteBSActionPerformed

    private void btnAddVLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddVLActionPerformed
//        Object[] options = {"Add from App Resource", "Add from My PC files"};
//        
//        int choice = JOptionPane.showOptionDialog(HappyButtons.mf, "Select path where to get Video files",
//                "Get Happy Loop video source",
//                JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
//        
//        if(choice == 0) {
//            AddVideoLoopFrame addVLFrame = new AddVideoLoopFrame(HappyButtons.mf, true);
//            addVLFrame.setVisible(true);
//        }
//        else {
            JFileChooser fc = new JFileChooser();
            FileFilter filter = new FileNameExtensionFilter("MP4 File", "mp4");
            fc.setFileFilter(filter);
            fc.setMultiSelectionEnabled(true);
            fc.showOpenDialog(HappyButtons.mf);

            File[] selectedFiles = fc.getSelectedFiles();

            for(File file : selectedFiles) {
                try {
                    FileChannel src = new FileInputStream(file.getAbsolutePath()).getChannel();
                    File destCheck = new File(HappyButtons.documentsPath + "\\HappyButtons\\hlvids\\" + file.getName());

                    if(!destCheck.exists()) {
                        FileChannel dest = new FileOutputStream(HappyButtons.documentsPath + "\\HappyButtons\\hlvids\\" + file.getName()).getChannel();

                        src.transferTo(0, src.size(), dest);

                        src.close();
                        dest.close();
                    }

//                    if((MainFrame.cboModel).getIndexOf(Utility.renameVideoName(file.getName())) < 0) {
//                        (MainFrame.cboModel).addElement(Utility.renameVideoName(file.getName()));
//                        (MainFrame.tfLastOperation).setText("[ADDED VIDEO]:: " + file.getName());
//                    }

                    if(!Utility.searchInTableCol(tblVideoLoop, Utility.renameVideoName(file.getName()), 0)) {
                        tblModelVL.insertRow(tblModelVL.getRowCount(), new Object[]{
                            Utility.renameVideoName(file.getName()), ""
                        });
                    }

//                    (MainFrame.cboVidLoop).setModel(MainFrame.cboModel);
                }
                catch(IOException ex) {
                    System.out.println(file.getAbsolutePath());
                    JOptionPane.showMessageDialog(HappyButtons.mf,
                        "Error reading/writing file",
                        "IO Error", 
                        JOptionPane.ERROR_MESSAGE);
                }
            }
//        }
    }//GEN-LAST:event_btnAddVLActionPerformed

    private void btnDeleteVLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteVLActionPerformed
        int selectedRow = tblVideoLoop.getSelectedRow(); // for checking only if atleast one item is selected
        int[] selectedRows = tblVideoLoop.getSelectedRows();
        File filePath = null;
        String[] fileError = {};
        
        if(selectedRow != -1) {
            int confirmation = JOptionPane.showConfirmDialog(null, 
                    "Are you sure you want to permanently delete selected item(s)?", 
                    "Delete items", 
                    JOptionPane.YES_NO_OPTION, 
                    JOptionPane.WARNING_MESSAGE);
            
            if(confirmation == 0) {
                String selectedItem = "";
                for(int i = (selectedRows.length - 1); i >= 0; i--) {
                    selectedItem = tblModelVL.getValueAt(selectedRows[i], 0).toString();
                    filePath = new File(HappyButtons.documentsPathDoubleSlash + "\\HappyButtons\\hlvids\\" + selectedItem + ".mp4");
                    
                    if(filePath.delete()) {
                        tblModelVL.removeRow(selectedRows[i]);
                        
                        (MainFrame.cboModel).removeElement(selectedItem);
                        (MainFrame.cboVidLoop).removeItem(selectedItem);
                        
                        selectedItem = "";
                    }
                    else {
                        fileError = Utility.addElementInStrArr(fileError.length, fileError, selectedItem);
                        selectedItem = "";
                    }
                }
                
                if(fileError.length > 0) {
                    String err = "", strListDown = "";
                    
                    err = fileError.length + " item(s)\n";
                    strListDown = "";
                    
                    for(int i = 1; i <= fileError.length; i++) {
                        strListDown = strListDown + "\n(" + i + ".mp4) " + fileError[i];
                    }
                    
                    JOptionPane.showMessageDialog(HappyButtons.mf, 
                        "Error in deleting " + err + strListDown, 
                        "File deletion error", 
                        JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btnDeleteVLActionPerformed

    private void btnAddToListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToListActionPerformed
        int selectedRow = tblVideoLoop.getSelectedRow();
        String selectedItem = tblModelVL.getValueAt(selectedRow, 0).toString();
        
        
    }//GEN-LAST:event_btnAddToListActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRemoveActionPerformed

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ResourceManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ResourceManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ResourceManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ResourceManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ResourceManagerFrame dialog = new ResourceManagerFrame(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddToList;
    private javax.swing.JButton btnAddVL;
    private javax.swing.JButton btnDeleteBS;
    private javax.swing.JButton btnDeleteVL;
    private javax.swing.JButton btnRemove;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JList<String> listVL;
    private javax.swing.JPanel panelBgmSfx;
    private javax.swing.JPanel panelHappyLoop;
    private javax.swing.JTabbedPane tabPanel;
    private javax.swing.JTable tblResources;
    private javax.swing.JTable tblVideoLoop;
    // End of variables declaration//GEN-END:variables
}
